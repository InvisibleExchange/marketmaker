syntax = "proto3";
package engine;


service Engine {

    rpc execute_deposit (DepositMessage) returns (DepositResponse);

    rpc execute_withdrawal (WithdrawalMessage) returns (SuccessResponse);

    rpc submit_limit_order (LimitOrderMessage) returns (OrderResponse);

    rpc submit_perpetual_order (PerpOrderMessage) returns (OrderResponse);

    rpc cancel_order (CancelOrderMessage) returns (CancelOrderResponse);

    rpc amend_order (AmendOrderRequest) returns (AmendOrderResponse);

    // rpc liquidation_order (PerpOrderMessage) returns (OrderResponse);

    rpc get_liquidity (LiquidityReq) returns (LiquidityRes);

    rpc get_orders (OrdersReq) returns (OrdersRes);

    rpc split_notes (SplitNotesReq) returns (SplitNotesRes);

    rpc change_position_margin (MarginChangeReq) returns (MarginChangeRes);

    // rpc finalize_batch (FinalizeBatchReq) returns (FinalizeBatchResponse);

    rpc restore_orderbook (RestoreOrderBookMessage) returns (SuccessResponse);

    // rpc start_funding (StartFundingUpdatesReq) returns (SuccessResponse);

    rpc update_index_price (OracleUpdateReq) returns (SuccessResponse);

    rpc get_state_info (StateInfoReq) returns (StateInfoRes);

}



// * TRANSACTION ENGINE =======================================================================================

// ------ DEPOSITS --------------

message DepositMessage {
    uint64 deposit_id = 1;
    uint64 deposit_token = 2;
    uint64 deposit_amount = 3;
    string stark_key = 4;
    repeated GrpcNote notes = 5;
    Signature signature = 6;
} 


message DepositResponse {
    bool successful = 1;
    repeated uint64 zero_idxs = 2;
    string error_message = 3;
}

// ------ SWAPS --------------


message LimitOrderMessage {
    uint64 expiration_timestamp = 1;
    uint64 token_spent= 2;
    uint64 token_received = 3;
    uint64 amount_spent = 4;
    uint64 amount_received = 5;
    uint64 fee_limit = 6;
    Address dest_received_address = 7;
    Address dest_spent_address = 8;
    string dest_received_blinding = 9;
    string dest_spent_blinding = 10;
    repeated GrpcNote notes_in = 11;
    GrpcNote refund_note = 12;
    Signature signature = 13;
    bool is_market = 14; // true - market order, false - limit order
    uint64 user_id = 15; // used to send a response thorugh a ws
}

message OrderResponse {
    bool successful = 1;
    uint64 order_id = 2; // new order id
    string error_message = 3;
}


message CancelOrderMessage {
    uint32 marketId = 1;
    uint64 order_id = 2;
    bool order_side = 3; // true-Bid, false-Ask
    uint64 user_id = 4; // used to verify that the user is the owner of the order
    bool is_perp = 5;
}

message CancelOrderResponse {
    bool successful = 1;
    GrpcNote pfr_note = 2;
    string error_message = 3;
}


message AmendOrderRequest {
    uint32 market_id = 1;
    uint64 order_id = 2;
    bool order_side = 3; // true-Bid, false-Ask
    double new_price = 4;
    Signature signature = 5;
    uint64 user_id = 6; // used to verify that the user is the owner of the order
    bool is_perp = 7;
}

message AmendOrderResponse {
    bool successful = 1;
    string error_message = 2;
}

// ------ WITHDRAWAL --------------

message WithdrawalMessage {
    uint64 withdrawal_token = 1;
    uint64 withdrawal_amount = 2;
    string stark_key = 3;
    repeated GrpcNote notes_in = 4;
    GrpcNote refund_note = 5;
    Signature signature = 6;
} 


message SuccessResponse {
    bool successful = 1;
    string error_message = 2;
}

// ------ PERPETUALS --------------

message PerpOrderMessage {
    uint64 expiration_timestamp = 1;
    GrpcPerpPosition position = 2;
    uint32 position_effect_type = 3; // 0-open, 1-modify, 2-close, 3-liquidate
    uint32 order_side = 4; // 0-buy, 1-sell
    uint64 synthetic_token = 5;
    uint64 collateral_token = 6;
    uint64 synthetic_amount = 7;
    uint64 collateral_amount = 8;
    uint64 fee_limit = 9;
    GrpcOpenOrderFields open_order_fields = 10;
    GrpcCloseOrderFields close_order_fields  = 11;
    Signature signature = 12;
    bool is_market = 13; // true - market order, false - limit order
    uint64 user_id = 14; // used to send a response thorugh a ws
}

message GrpcPerpPosition {
    uint32 order_side = 1;
    uint64 synthetic_token = 2;
    uint64 collateral_token = 3;
    uint64 position_size = 4;
    uint64 margin = 5;
    uint64 entry_price = 6;
    uint64 liquidation_price = 7;
    uint64 bankruptcy_price = 8;
    string position_address = 9;
    uint32 last_funding_idx = 10;
    string hash = 11;
    uint32 index = 12;
}


// ------ ORDER BOOK ------------------

message SpotOrderRestoreMessageInner {
    uint64 order_id = 1;
    double price = 2;
    uint64 amount = 3;
    uint64 timestamp = 4;
    LimitOrderMessage order = 5;
}

message PerpOrderRestoreMessageInner {
    uint64 order_id = 1;
    double price = 2;
    uint64 amount = 3;
    uint64 timestamp = 4;
    PerpOrderMessage order = 5;
}


message SpotOrderRestoreMessage {
    uint64 market_id = 1;
    repeated SpotOrderRestoreMessageInner bid_order_restore_messages = 2;
    repeated SpotOrderRestoreMessageInner ask_order_restore_messages = 3;
}

message PerpOrderRestoreMessage{
    uint64 market_id = 1;
    repeated PerpOrderRestoreMessageInner bid_order_restore_messages = 2;
    repeated PerpOrderRestoreMessageInner ask_order_restore_messages = 3;
}


message RestoreOrderBookMessage {
    repeated SpotOrderRestoreMessage spot_order_restore_messages = 1;
    repeated PerpOrderRestoreMessage perp_order_restore_messages = 2;
}



// ------ UTILS --------------

message GrpcOpenOrderFields {
    uint64 initial_margin = 1;
    uint64 collateral_token = 2;
    repeated GrpcNote notes_in = 3;
    GrpcNote refund_note = 4;
    string position_address = 5;
    string blinding = 6;
}

message GrpcCloseOrderFields {
    Address dest_received_address = 1;
    string dest_received_blinding = 2;
}

message GrpcNote {
    uint64 index = 1;
    Address address = 2;
    uint64 token = 3;
    uint64 amount = 4;
    string blinding = 5;
}

message Address {
    string x = 1;
    string y = 2;
}


message Signature {
    string r = 1;
    string s = 2;
}

// * LIQUIDITY ---------------------------------------------------

message LiquidityReq {
    bool is_perp = 1;
    uint32 market_id = 2;
}

// Vec<(f64, u64)>
message LiquidityRes {
    bool successful = 1;
    repeated BookEntry bid_queue = 2;
    repeated BookEntry ask_queue = 3;
    string error_message = 4;
}

message BookEntry {
    double price = 1;
    uint64 amount = 2;
    uint64 timestamp = 3;
}


// *  SPLIT NOTES --------------------------------------------------
message SplitNotesReq {
    repeated GrpcNote notes_in = 1;
    GrpcNote note_out = 2;
    GrpcNote refund_note = 3;
}

message SplitNotesRes {
    bool successful = 1;
    string error_message = 2;
    repeated uint64 zero_idxs = 3;
}

// *  SPLIT NOTES --------------------------------------------------
message MarginChangeReq {
    int64 margin_change = 1;
    repeated GrpcNote notes_in = 2;
    GrpcNote refund_note = 3;
    GrpcCloseOrderFields close_order_fields = 4;
    GrpcPerpPosition position = 5;
    Signature signature = 6;
    
}

message MarginChangeRes {
    bool successful = 1;
    string error_message = 2;
    uint64 return_collateral_index = 3;
}



// * ORDERS --------------------------------------------------------


message OrdersReq {
    repeated uint64 order_ids = 1;
    repeated uint64 perp_order_ids = 2;
}

message OrdersRes {
    repeated uint64 bad_order_ids = 1;    // Non-existent or invalid order ids
    repeated ActiveOrder orders = 2;
    
    repeated uint64 bad_perp_order_ids = 3;    // Non-existent or invalid order ids
    repeated ActivePerpOrder perp_orders =4;

    repeated GrpcNote pfr_notes =5;
}


message ActiveOrder {
    uint64 order_id = 1;
    uint64 expiration_timestamp = 2;
    uint64 qty_left = 3;
    double price = 4;
    uint64 base_asset = 5;
    uint64 quote_asset = 6;
    bool order_side = 7;  // true-BID, false-ASK
    uint64 fee_limit = 8;
    repeated GrpcNote notes_in = 9;
    GrpcNote refund_note = 10;
}

message ActivePerpOrder {
    uint64 order_id = 1;
    uint64 expiration_timestamp = 2;
    uint64 qty_left = 3;
    double price = 4;
    uint64 synthetic_token = 5;
    bool order_side = 6;  // true-BID, false-ASK
    uint32 position_effect_type = 7;
    uint64 fee_limit = 8;
    string position_address = 9;
    repeated GrpcNote notes_in = 10;
    GrpcNote refund_note = 11;
    uint64 initial_margin = 12; 
}




// * FUNDING UPDATE ---------------------------------------------------

message StartFundingUpdatesReq {
} 



// * ORACLE PRICE UPDATE ---------------------------------------------------

message OracleUpdateReq {
    repeated GrpcOracleUpdate oracle_price_updates = 1;
} 



message GrpcOracleUpdate {
    uint64 token = 1;
    uint32 timestamp = 2;
    repeated uint32 observer_ids = 3;
    repeated uint64 prices = 4;
    repeated Signature signatures = 5;
}




// STATE INFO ------------------------------------------------------------

message StateInfoReq {
} 



message StateInfoRes {
    repeated string state_tree = 1;
    repeated string perpetual_state_tree = 2;
}

